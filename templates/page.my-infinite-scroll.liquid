<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Infinite Scroll Page</title>
    <style>
      .sticky-header {
        position: sticky;
        top: 0;
        background-color: #fff;
        z-index: 1000;
        padding: 10px;
        border-bottom: 1px solid #ccc;
        text-align: center;
      }
      .collection-list,
      .sub-collection-list {
        display: flex;
        justify-content: center;
        list-style: none;
        padding: 0;
        margin: 0;
      }
      .collection-item,
      .sub-collection-item {
        margin: 0 5px;
      }
      .filter-button {
        cursor: pointer;
        background-color: #007bff;
        color: white;
        border: none;
        padding: 5px 10px;
        margin: 2px;
        border-radius: 3px;
      }
      .filter-button.active {
        background-color: #0056b3;
      }
      .sub-collection-item .filter-button {
        background-color: white;
        color: black;
        border: 1px solid #ccc;
      }
      .sub-collection-item .filter-button.active {
        background-color: red;
        color: white;
      }
      .hidden {
        display: none;
      }
      .grid__item {
        width: calc(50% - var(--grid-desktop-horizontal-spacing) * 3 / 4) !important;
        max-width: calc(50% - var(--grid-desktop-horizontal-spacing) * 3 / 4) !important;
      }
      #main-collection-filters {
        display: none;
      }
    </style>
  </head>
  <body>
    <div class="sticky-header">
      <h2>Collections</h2>
      <ul class="collection-list" id="parent-collections">
        <!-- Collection items will be dynamically added here by JavaScript -->
      </ul>
      <ul class="sub-collection-list hidden" id="sub-collection-list">
        <!-- Sub-collections will be dynamically added here -->
      </ul>
    </div>

    <div id="items-container">
      <!-- Your items will be rendered here dynamically -->
    </div>

    <script>
      console.log("Start of script");
      
        const collectionHandles = {
          'Fresh Fish': ['Baby Salmon', 'Fish', 'Atlantic Salmon'],
          'Seasonings': ['Seasonings'],
          'Baked Fish': ['Baked Fish'],
          'Ground Fish': ['Ground Fish'],
        };
      

      let collectionMetaData = {
        {% for handle in collections %}
          "{{ handle.title }}": {{ handle.all_products_count | default: 0 }}{% unless forloop.last %},{% endunless %}
        {% endfor %}
      };

      document.addEventListener('DOMContentLoaded', function() {

      const parentCollectionsContainer = document.getElementById('parent-collections');
        const subCollectionsContainer = document.getElementById('sub-collection-list');

        // Function to create a parent collection button
        function createParentButton(parentName) {
          const listItem = document.createElement('li');
          listItem.className = 'collection-item';

          const button = document.createElement('button');
          button.className = `filter-button ${parentName.replace(/\s+/g, '-').toLowerCase()}`;
          button.setAttribute('data-category', parentName);
          button.textContent = parentName;

          listItem.appendChild(button);
          return listItem;
        }

        // Function to create child collection buttons
        function createChildButtons(childNames) {
          subCollectionsContainer.innerHTML = ''; // Clear previous children
          childNames.forEach(childName => {
      const listItem = document.createElement('li');
      listItem.className = 'sub-collection-item';

      const button = document.createElement('button');
      button.className = `filter-button ${childName.replace(/\s+/g, '-').toLowerCase()}`;
      button.setAttribute('data-category', childName);
      button.textContent = childName;

      listItem.appendChild(button);
      subCollectionsContainer.appendChild(listItem);
          });

          subCollectionsContainer.classList.remove('hidden');
        }

        // Loop through parent collections and append to the DOM
        for (let parentName in collectionHandles) {
          const parentButton = createParentButton(parentName);
          parentCollectionsContainer.appendChild(parentButton);

          // Add event listener to show child collections when parent is clicked
          parentButton.addEventListener('click', function() {
      const childCollections = collectionHandles[parentName];
      createChildButtons(childCollections);

      // Add logic to handle the active state of parent buttons if needed
      const parentButtons = parentCollectionsContainer.querySelectorAll('.filter-button');
      parentButtons.forEach(btn => btn.classList.remove('active'));
      this.querySelector('.filter-button').classList.add('active');
          });
        }

      // Now you can add event listeners or other logic as needed
          });
    </script>
  </body>
</html>