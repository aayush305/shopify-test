<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Infinite Scroll Page</title>
    <style>
      .sticky-header {
        position: sticky;
        top: 0;
        background-color: #fff;
        z-index: 1000;
        padding: 10px;
        border-bottom: 1px solid #ccc;
        text-align: center;
      }
      .collection-list,
      .sub-collection-list {
        display: flex;
        justify-content: center;
        list-style: none;
        padding: 0;
        margin: 0;
      }
      .collection-item,
      .sub-collection-item {
        margin: 0 5px;
      }
      .filter-button {
        cursor: pointer;
        background-color: #007bff;
        color: white;
        border: none;
        padding: 5px 10px;
        margin: 2px;
        border-radius: 3px;
      }
      .filter-button.active {
        background-color: #0056b3;
      }
      .sub-collection-item .filter-button {
        background-color: white;
        color: black;
        border: 1px solid #ccc;
      }
      .sub-collection-item .filter-button.active {
        background-color: red;
        color: white;
      }
      .hidden {
        display: none;
      }
      .grid__item {
        width: calc(50% - var(--grid-desktop-horizontal-spacing) * 3 / 4) !important;
        max-width: calc(50% - var(--grid-desktop-horizontal-spacing) * 3 / 4) !important;
      }
      .section-main-collection-product-grid-padding {
        padding: 0 !important;
        margin: 0 !important;
      }
      #main-collection-filters {
        display: none;
      }
    </style>
  </head>
  <body>
    <div class="sticky-header">
      <h2>Collections</h2>
      <ul class="collection-list" id="parent-collections">
        {% assign collections = "Fresh Fish:Baked Fish:Ground Fish:Seasonings" | split: ":" %}
        {% for collection in collections %}
          <li class="collection-item">
            <button class="filter-button" data-category="{{ collection | handleize }}">{{ collection }}</button>
          </li>
        {% endfor %}
      </ul>
      <ul class="sub-collection-list hidden" id="sub-collection-list">
        <!-- Sub-collections will be dynamically added here -->
      </ul>
    </div>

    <div id="items-container">
      <!-- Your items will be rendered here dynamically -->
    </div>

    <script>
      let activeCategory = 'fresh-fish'; // Default to the first category
      let activeSubCategory = 'baby-salmon'; // Default to the first subcategory
      let isLoading = false;

      document.addEventListener('DOMContentLoaded', () => {
        const parentCollections = document.querySelectorAll('#parent-collections .filter-button');
        const firstCategoryButton = parentCollections[0];
        const firstSubCategoryButton = document.querySelector('#sub-collection-list .filter-button');

        if (firstCategoryButton) {
          activeCategory = firstCategoryButton.dataset.category;
          firstCategoryButton.classList.add('active');
        }

        if (firstSubCategoryButton) {
          activeSubCategory = firstSubCategoryButton.dataset.category;
          firstSubCategoryButton.classList.add('active');
        }

        window.addEventListener('scroll', updateActiveCategoryAndSubcategory);
      });

      function updateActiveCategoryAndSubcategory() {
        const itemsContainer = document.getElementById('items-container');
        const productItems = itemsContainer.querySelectorAll('li[data-subcategory]');
        const viewportHeight = window.innerHeight;

        productItems.forEach(item => {
          const rect = item.getBoundingClientRect();
          if (rect.top >= 0 && rect.bottom <= viewportHeight) {
            const subCategory = item.getAttribute('data-subcategory');
            if (activeSubCategory !== subCategory) {
              activeSubCategory = subCategory;
              highlightActiveCategoryAndSubcategory();
            }
          }
        });
      }

      function highlightActiveCategoryAndSubcategory() {
        // Highlight active category
        document.querySelectorAll('#parent-collections .filter-button').forEach(button => {
          if (button.dataset.category === activeCategory) {
            button.classList.add('active');
          } else {
            button.classList.remove('active');
          }
        });

        // Highlight active subcategory
        document.querySelectorAll('#sub-collection-list .filter-button').forEach(button => {
          if (button.dataset.category === activeSubCategory) {
            button.classList.add('active');
          } else {
            button.classList.remove('active');
          }
        });
      }

      function fetchAndRenderProducts(category, isSubCategory) {
        isLoading = true;
        const url = isSubCategory
          ? `/collections/${category}/products?section_id=main-collection-product-grid`
          : `/collections/${category}/products?section_id=main-collection-product-grid`;

        fetch(url)
          .then(response => response.text())
          .then(html => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            const newProductsSection = doc.querySelector('#shopify-section-main-collection-product-grid');
            const itemsContainer = document.getElementById('items-container');
            
            if (newProductsSection) {
              itemsContainer.innerHTML += newProductsSection.innerHTML;
            } else {
              itemsContainer.innerHTML += '<p>No products found</p>';
            }
            isLoading = false;
          })
          .catch(error => {
            console.error('Error fetching products:', error);
            isLoading = false;
          });
      }
    </script>
  </body>
</html>
