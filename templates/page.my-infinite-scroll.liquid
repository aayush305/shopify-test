<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Infinite Scroll Page</title>
  <style>
    .sticky-header {
      position: sticky;
      top: 0;
      background-color: #fff;
      z-index: 1000;
      padding: 10px;
      border-bottom: 1px solid #ccc;
      text-align: center;
    }
    .collection-list, .sub-collection-list {
      display: flex;
      justify-content: center;
      list-style: none;
      padding: 0;
      margin: 0;
    }
    .collection-item, .sub-collection-item {
      margin: 0 5px;
    }
    .filter-button {
      cursor: pointer;
      background-color: #007bff;
      color: white;
      border: none;
      padding: 5px 10px;
      margin: 2px;
      border-radius: 3px;
    }
    .filter-button.active {
      background-color: #0056b3;
    }
    .sub-collection-item .filter-button {
      background-color: white;
      color: black;
      border: 1px solid #ccc;
    }
    .sub-collection-item .filter-button.active {
      border-color: red;
    }
    .hidden {
      display: none;
    }
    .grid__item {
        width: calc(50% - var(--grid-desktop-horizontal-spacing)* 3 / 4) !important;
        max-width: calc(50% - var(--grid-desktop-horizontal-spacing)* 3 / 4) !important;
    }
  </style>
</head>
<body>
  <div class="sticky-header">
    <h2>Collections</h2>
    <ul class="collection-list" id="parent-collections">
      {% assign collections = "Fresh Fish:Baked Fish:Ground Fish:Seasonings" | split: ":" %}
      {% for collection in collections %}
        <li class="collection-item">
          <button class="filter-button" onclick="selectCategory('{{ collection | handleize }}', this)">{{ collection }}</button>
        </li>
      {% endfor %}
    </ul>
    <ul class="sub-collection-list hidden" id="sub-collection-list">
      <!-- Sub-collections will be dynamically added here -->
    </ul>
  </div>

  <div id="items-container">
    <!-- Your items will be rendered here dynamically -->
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
  const parentCollections = document.querySelectorAll('#parent-collections .filter-button');
  if (parentCollections.length > 0) {
    // Automatically select the first category and start loading products
    loadNextBatch();
  }

  // Set up infinite scrolling
  window.addEventListener('scroll', () => {
    if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight - 500 && !isLoading) {
      loadNextBatch();
    }
  });
});

function loadNextBatch() {
  isLoading = true;

  const parentCollections = document.querySelectorAll('#parent-collections .filter-button');

  if (currentParentIndex >= parentCollections.length) {
    console.log('All collections loaded');
    return;
  }

  const currentParent = parentCollections[currentParentIndex].textContent.trim().toLowerCase().replace(/\s+/g, '-');
  showSubCollections(currentParent, () => {
    if (currentChildIndex >= subCollections[currentParent].length) {
      currentParentIndex++;
      currentChildIndex = 0;
      loadNextBatch();
    } else {
      const currentChild = subCollections[currentParent][currentChildIndex].toLowerCase().replace(/\s+/g, '-');
      fetchAndRenderProducts(currentChild, true, () => {
        currentChildIndex++;
        isLoading = false;
      });
    }
  });
}

function showSubCollections(category, callback) {
  const subCollectionList = document.getElementById('sub-collection-list');
  subCollectionList.classList.remove('hidden');

  subCollections = {
    'fresh-fish': ['Baby Salmon', 'Fillet', 'Atlantic Salmon'],
    // Add other collections and their sub-collections here as needed
  };

  // Clear previous sub-collections
  subCollectionList.innerHTML = '';

  if (subCollections[category]) {
    subCollections[category].forEach((subCollection) => {
      const subCollectionItem = document.createElement('li');
      subCollectionItem.classList.add('sub-collection-item');

      const subCollectionButton = document.createElement('button');
      subCollectionButton.classList.add('filter-button');
      subCollectionButton.textContent = subCollection;
      subCollectionButton.onclick = () => selectSubCategory(subCollection.toLowerCase().replace(/\s+/g, '-'), subCollectionButton);

      subCollectionItem.appendChild(subCollectionButton);
      subCollectionList.appendChild(subCollectionItem);
    });
    callback();
  } else {
    subCollectionList.classList.add('hidden');
    callback();
  }
}

function fetchAndRenderProducts(category, isSubCategory, callback) {
  const url = `/collections/${category}/products?section_id=main-collection-product-grid`;

  fetch(url)
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.text();
    })
    .then(html => {
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      const newProductsSection = doc.querySelector('#shopify-section-main-collection-product-grid');
      const itemsContainer = document.getElementById('items-container');
      
      if (newProductsSection) {
        itemsContainer.innerHTML += newProductsSection.innerHTML;
      } else {
        itemsContainer.innerHTML += '<p>No products found</p>';
      }
      callback();
    })
    .catch(error => {
      console.error('Error fetching products:', error);
      const itemsContainer = document.getElementById('items-container');
      itemsContainer.innerHTML += '<p>Error fetching products. Please try again later.</p>';
      callback();
    });
}

  </script>
</body>
</html>
