<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Infinite Scroll Page</title>
  <style>
    .sticky-header {
      position: sticky;
      top: 0;
      background-color: #fff;
      z-index: 1000;
      padding: 10px;
      border-bottom: 1px solid #ccc;
      text-align: center;
    }
    .collection-list, .sub-collection-list {
      display: flex;
      justify-content: center;
      list-style: none;
      padding: 0;
      margin: 0;
    }
    .collection-item, .sub-collection-item {
      margin: 0 5px;
    }
    .filter-button {
      cursor: pointer;
      background-color: #007bff;
      color: white;
      border: none;
      padding: 5px 10px;
      margin: 2px;
      border-radius: 3px;
    }
    .filter-button.active {
      background-color: #0056b3;
    }
    .sub-collection-item .filter-button {
      background-color: white;
      color: black;
      border: 1px solid #ccc;
    }
    .sub-collection-item .filter-button.active {
      border-color: red;
    }
    .hidden {
      display: none;
    }
    #items-container {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
    }
    .product-item {
      flex-basis: 50%;
    }
    #loading-indicator {
      text-align: center;
      padding: 20px;
    }
    .grid__item {
        width: calc(50% - var(--grid-desktop-horizontal-spacing)* 3 / 4) !important;
        max-width: calc(50% - var(--grid-desktop-horizontal-spacing)* 3 / 4) !important;
    }
  </style>
</head>
<body>
  <div class="sticky-header">
    <h2>Collections</h2>
    <ul class="collection-list" id="parent-collections">
      {% assign collections = "Fresh Fish:Baked Fish:Ground Fish:Seasonings" | split: ":" %}
      {% for collection in collections %}
        <li class="collection-item">
          <button class="filter-button" onclick="selectCategory('{{ collection | handleize }}', this)">{{ collection }}</button>
        </li>
      {% endfor %}
    </ul>
    <ul class="sub-collection-list hidden" id="sub-collection-list">
      <!-- Sub-collections will be dynamically added here -->
    </ul>
  </div>

  <div id="items-container">
    <!-- Your items will be rendered here dynamically -->
  </div>

  <div id="loading-indicator" class="hidden">Loading more products...</div>

  <script>
    let activeCategory = null;
    let nextPage = 2;
    let isLoading = false;
    let activeCategory = null;
    let activeSubCategory = null;
    let currentPage = 1;
    let loading = false;

    document.addEventListener('DOMContentLoaded', () => {
      const parentCollections = document.querySelectorAll('#parent-collections .filter-button');
      if (parentCollections.length > 0) {
        // Automatically select the first category
        selectCategory(parentCollections[0].textContent.trim().toLowerCase().replace(/\s+/g, '-'), parentCollections[0]);
      }
      setupInfiniteScroll();
    });

    function selectCategory(category, element) {
      // Reset pagination
      nextPage = 2;
      isLoading = false;

      // Remove active class from all buttons
      document.querySelectorAll('.filter-button').forEach(button => {
        button.classList.remove('active');
      });

      // Add active class to the clicked button
      element.classList.add('active');

      // Store the active category
      activeCategory = category;

      // Show sub-collections if available
      showSubCollections(category);

      // Fetch and render products by category
      fetchAndRenderProducts(category, false);
    }

    function showSubCollections(category) {
      const subCollectionList = document.getElementById('sub-collection-list');
      subCollectionList.classList.remove('hidden');

      const subCollections = {
        'fresh-fish': ['Baby Salmon', 'Fish', 'Atlantic Salmon'],
        // Add other collections and their sub-collections here as needed
      };

      // Clear previous sub-collections
      subCollectionList.innerHTML = '';

      if (subCollections[category]) {
        subCollections[category].forEach((subCollection, index) => {
          const subCollectionItem = document.createElement('li');
          subCollectionItem.classList.add('sub-collection-item');

          const subCollectionButton = document.createElement('button');
          subCollectionButton.classList.add('filter-button');
          subCollectionButton.textContent = subCollection;
          subCollectionButton.onclick = () => selectSubCategory(subCollection.toLowerCase().replace(/\s+/g, '-'), subCollectionButton);

          subCollectionItem.appendChild(subCollectionButton);
          subCollectionList.appendChild(subCollectionItem);

          // Automatically select the first sub-category
          if (index === 0) {
            selectSubCategory(subCollection.toLowerCase().replace(/\s+/g, '-'), subCollectionButton);
          }
        });
      } else {
        subCollectionList.classList.add('hidden');
      }
    }

    function selectSubCategory(subCategory, element) {
      // Remove active class from all sub-category buttons
      document.querySelectorAll('.sub-collection-item .filter-button').forEach(button => {
        button.classList.remove('active');
      });

      // Add active class to the clicked sub-category button
      element.classList.add('active');

      // Fetch and render products by sub-category
      fetchAndRenderProducts(subCategory, true);
    }

    function fetchAndRenderProducts(category, isSubCategory) {
            if (loading) return; // Prevent multiple simultaneous requests
            loading = true;

            const url = isSubCategory
                ? `/collections/${category}/products.json?page=${currentPage}&limit=12`
                : `/collections/${category}/products.json?page=${currentPage}&limit=12`;

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    const itemsContainer = document.getElementById('items-container');
                    if (data.products.length > 0) {
                        data.products.forEach(product => {
                            const productItem = document.createElement('div');
                            productItem.innerHTML = `
                                <h3>${product.title}</h3>
                                <img src="${product.images[0].src}" alt="${product.title}" width="200">
                                <p>${product.variants[0].price}</p>
                            `;
                            itemsContainer.appendChild(productItem);
                        });
                        currentPage++;
                    } else {
                        if(currentPage === 1) {
                          // Show 'No products found' only for the initial load
                          itemsContainer.innerHTML = '<p>No products found</p>'; 
                        }
                    }
                    loading = false;
                })
                .catch(error => console.error('Error fetching products:', error));
        }

        // Infinite Scroll Logic
        const observer = new IntersectionObserver((entries) => {
            if (entries[0].isIntersecting && !loading) {
                fetchAndRenderProducts(activeCategory || activeSubCategory, !!activeSubCategory); 
            }
        }, { rootMargin: '200px' }); // Trigger load when 200px from bottom

        // Target the last product or loading element
        const targetElement = () => document.querySelector('#items-container > div:last-child');
        const observeLastItem = () => targetElement() && observer.observe(targetElement());

        // Initial Observation (after first fetch)
        document.addEventListener('DOMContentLoaded', () => {
            fetchAndRenderProducts(document.querySelectorAll('#parent-collections .filter-button')[0].textContent.trim().toLowerCase().replace(/\s+/g, '-'), false);
        });
        
        // Re-observe after each fetch to track new last item
        const itemsContainer = document.getElementById('items-container');
        itemsContainer.addEventListener('DOMNodeInserted', observeLastItem);

    </script>
</body>
</html>
